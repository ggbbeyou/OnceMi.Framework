<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OnceMi.Framework.Extension</name>
    </assembly>
    <members>
        <member name="M:OnceMi.Framework.Extension.Aop.CleanCacheAsyncInterceptor.CanIntercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            判断是否包含有CleanCache的属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Aop.CleanCacheAsyncInterceptor.InterceptAsynchronous(Castle.DynamicProxy.IInvocation)">
            <summary>
            拦截异步方法 返回值为Task
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:OnceMi.Framework.Extension.Aop.CleanCacheAsyncInterceptor.InterceptAsynchronous``1(Castle.DynamicProxy.IInvocation)">
            <summary>
            拦截异步方法 返回值为Task object
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="invocation"></param>
        </member>
        <member name="M:OnceMi.Framework.Extension.Aop.CleanCacheAsyncInterceptor.InterceptSynchronous(Castle.DynamicProxy.IInvocation)">
            <summary>
            拦截同步执行的方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="T:OnceMi.Framework.Extension.Aop.IAttributeAsyncInterceptor">
            <summary>
            属性拦截器接口
            </summary>
        </member>
        <member name="T:OnceMi.Framework.Extension.Authorizations.SkipAuthorizationAttribute">
            <summary>
            用于保护API资源，被保护的接口在用户登录后即可访问
            无需授权，但是需要登录后才能访问
            </summary>
        </member>
        <member name="M:OnceMi.Framework.Extension.Authorizations.PermissionAuthorizationHandler.CompareMenu(OnceMi.Framework.Entity.Admin.Menu,System.String,System.String)">
            <summary>
            比较请求的菜单和用户权限菜单是否相同
            </summary>
            <param name="menu"></param>
            <param name="requestPath"></param>
            <param name="requestMethod"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.DependencyInjection.FreeSqlCreateDatabaseExtension.CreateDatabaseIfNotExists(FreeSql.FreeSqlBuilder)">
            <summary>
            请在UseConnectionString配置后调用此方法
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="T:OnceMi.Framework.Extension.DependencyInjection.ProxiedServicesExtensions">
            <summary>
            注入AOP代理扩展
            </summary>
        </member>
        <member name="M:OnceMi.Framework.Extension.DependencyInjection.RegisterAutoMapper.GetMapperFrom">
            <summary>
            自动注入包含MapperFromAttribute的类
            </summary>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.DependencyInjection.RegisterAutoMapper.GetMapperTo">
            <summary>
            自动注入包含MapperToAttribute的类
            </summary>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.DependencyInjection.RegisterDatabase.UseDbSeed(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            初始化数据库
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.DependencyInjection.RegisterDatabase.SyncStructure(IFreeSql)">
            <summary>
            同步表结构
            </summary>
            <param name="fsql"></param>
        </member>
        <member name="M:OnceMi.Framework.Extension.DependencyInjection.RegisterDatabase.IsAutoSyncStructure(OnceMi.Framework.Config.DbConnectionStringsNode,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            是否开启表结构同步
            </summary>
            <param name="dbConfig"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.DependencyInjection.RegisterDatabase.GetConnectionStrings(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            从IConfiguration中获取连接字符串
            </summary>
            <param name="configuration"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:OnceMi.Framework.Extension.DependencyInjection.RegisterRedisCache.AddRedisCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注入缓存服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:OnceMi.Framework.Extension.Filters.GlobalPermissionFilter">
            <summary>
            全局授权过滤器
            </summary>
        </member>
        <member name="T:OnceMi.Framework.Extension.Filters.RequestLimitAttribute">
            <summary>
            请求限流
            </summary>
            <remarks>
            请求限流过滤器，登录用户每分钟请求次数
            采用计数器算法和Redis，更好的可以采用令牌桶，但是令牌桶在分布式环境下实现起来有点麻烦。
            </remarks>
        </member>
        <member name="P:OnceMi.Framework.Extension.Filters.RequestLimitAttribute.Count">
            <summary>
            限流次数
            </summary>
        </member>
        <member name="P:OnceMi.Framework.Extension.Filters.RequestLimitAttribute.LimitSeconds">
            <summary>
            限流时间段，单位：秒
            </summary>
        </member>
        <member name="M:OnceMi.Framework.Extension.Filters.RequestLimitAttribute.IsPassed(System.String,System.String,System.String,System.String)">
            <summary>
            接口是否在限制次数范围内
            </summary>
            <param name="uniqueid">标识调用的key(accesstoken/token)</param>
            <param name="controller">服务</param>
            <param name="action">方法</param>
            <param name="method">请求方式</param>
            <returns></returns>
        </member>
        <member name="T:OnceMi.Framework.Extension.Filters.TrimStringsFilterAttribute">
            <summary>
            去除请求string中前后空格
            </summary>
        </member>
        <member name="T:OnceMi.Framework.Extension.Helpers.RewriteHelper">
            <summary>
            一些重写规则
            </summary>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.IJobSchedulerService.Add(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            添加（开始）任务
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.IJobSchedulerService.Delete(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            删除任务
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.IJobSchedulerService.Pause(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            暂停任务
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.IJobSchedulerService.Resume(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            恢复任务
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.IJobSchedulerService.Stop(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            停止任务
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.IJobSchedulerService.Trigger(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            立即执行任务
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.IJobSchedulerService.Exists(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            作业是否存在
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.JobSchedulerService.Init">
            <summary>
            初始化作业
            系统启动时，从数据库中加载之前在运行的任务
            状态变更：
            1、等待变更为等待
            2、运行变更为等待（重新加载后需要重新开始运行）
            系统启动时，先清除缓存，然后将过期任务设置为停止
            </summary>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.JobSchedulerService.Add(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            添加作业
            状态变更：
            1、初始化状态为停止状态，变更为等待运行状态（立即执行）
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.JobSchedulerService.Delete(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            删除任务
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.JobSchedulerService.Pause(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            暂停任务
            状态变更：
            从等待或运行状态变更为暂停状态，不能从停止状态变更到暂停状态
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.JobSchedulerService.Resume(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            恢复
            状态变更：
            1、从暂停状态变更为等待状态
            2、从停止状态（手动停止）变更为等待状态
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.JobSchedulerService.Stop(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            停止作业
            状态变更：
            1、从等待变更为停止
            2、从运行变更为停止
            3、从暂停变更为停止
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:OnceMi.Framework.Extension.Job.JobSchedulerService.Trigger(OnceMi.Framework.Entity.Admin.Job)">
            <summary>
            立即执行
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="T:OnceMi.Framework.Extension.Subscribers.JobHistorySubscribeService">
            <summary>
            写作业历史记录
            </summary>
        </member>
    </members>
</doc>
